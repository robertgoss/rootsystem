module Test.TestThesis where

import Test.Tasty
import Test.Tasty.SmallCheck as SC
import Test.Tasty.QuickCheck as QC
import Test.Tasty.HUnit

import Thesis
import Weyl


import Data.Set (fromList)

testThesis = testGroup "E8 algebra" [testThesisProp, testThesisUnit]

testThesisProp = testGroup "Properties" []
testThesisUnit = testGroup "Unit tests" [testSpin16QuotientElementNumber,
										testDoubleQuoE8Union,
										testDoubleQuoE8Distinct
										]

testSpin16QuotientElementNumber = testCase "The quotients of the weyl groups of E8 and Spin16 has order ?" $ 
                                    order spin16QuotientGroup @?= 135

testDoubleQuoE8Distinct = testCase "The S3E7 Spin16 double quotient at one and xs are distinct" $
                                    (one spin16QuotientGroup) `notElem` spin16X8SS3E7 @? "Should not contian one"

testDoubleQuoE8Union = testCase "The S3E7 Spin16 double quotient are generated by one and xs are distinct" $
                                    fromList (spin16OneS3E7 ++ spin16X8SS3E7) == (fromList $ Weyl.elements spin16QuotientGroup) @? "Should cover all"

