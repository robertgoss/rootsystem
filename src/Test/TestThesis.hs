module Test.TestThesis where

import Test.Tasty
import Test.Tasty.SmallCheck as SC
import Test.Tasty.QuickCheck as QC
import Test.Tasty.HUnit

import Thesis
import Weyl
import SubSystem
import SemiSimple

import Data.Set (fromList)

testThesis = testGroup "Thesis" [testThesisProp, testThesisUnit]

testThesisProp = testGroup "Properties" []
testThesisUnit = testGroup "Unit tests" [testSpin16QuotientElementNumber,
										testDoubleQuoE8Union,
										testDoubleQuoE8Distinct,
										testSpin4Spin12QuotientElementNumber,
										testDoubleQuoS3E7Union,
										testDoubleQuoS3E7Distinct,
										testE8Bonds,
										testS3E7Gens,
										testS3E7Independence,
										testS3S1E6Gens,
										testS3S1E6Independence,
										testE8SystemType,
										testSubSpin16SystemType,
										testSubS3E7SystemType,
										testS3E7SystemType,
										testSubSpin4Spin12SystemType,
										testSubS3S1E6SystemType
										]

testSpin16QuotientElementNumber = testCase "The quotients of the weyl groups of E8 and Spin16 has order 135" $ 
                                    order spin16QuotientGroup @?= 135

testDoubleQuoE8Distinct = testCase "The S3E7 Spin16 double quotient at one and xs are distinct" $
                                    (one spin16QuotientGroup) `notElem` spin16X8SS3E7 @? "Should not contian one"

testDoubleQuoE8Union = testCase "The S3E7 Spin16 double quotient are generated by one and xs are distinct" $
                                    fromList (spin16OneS3E7 ++ spin16X8SS3E7) == (fromList $ Weyl.elements spin16QuotientGroup) @? "Should cover all"

testSpin4Spin12QuotientElementNumber = testCase "The quotients of the weyl groups of S3E7 and Spin4Spin12 has order 63" $ 
                                    order spin4spin12QuotientGroup @?= 63

testDoubleQuoS3E7Distinct = testCase "The S3S1E6 Spin4Spin12 double quotient at one and xs are distinct" $
                                    (one spin4spin12QuotientGroup) `notElem` spin4spin12X7SS3S1E6 @? "Should not contian one"

testDoubleQuoS3E7Union = testCase "The S3S1E6 Spin4Spin12 double quotient are generated by one and xs are distinct" $
                                    fromList (spin4spin12OneS3S1E6 ++ spin4spin12X7SS3S1E6) == (fromList $ Weyl.elements spin4spin12QuotientGroup) @? "Should cover all"


e8bonds = [(0,1),(1,3),(2,3),(3,4),(4,5),(5,6),(6,7)]

bondCommute2 gens (i,j) = commute2 (gens!!i) (gens!!j)

testE8Bonds = testCase "The generators of the weyl group of E8 should commute according to bonds" $
								all (bondCommute2 (Weyl.generators e8Group)) e8bonds @? "Incorrect relations between generators"

testS3E7Gens = testCase "There should be 8 generators of S3E7" $ length (Weyl.generators s3e7Group) @?= 8

elementCommute gens i j = commute (gens!!i) (gens!!j)

testS3E7Independence = testCase "The S3 generator should commute with other generators" $ 
                                 all (elementCommute (Weyl.generators s3e7Group) 0) [1..7] @? "S3 generator should be independent from others"

testS3S1E6Gens = testCase "There should be 7 generators of S3S1E6" $ length (Weyl.generators s3s1e6Group) @?= 7


testS3S1E6Independence = testCase "The S3 generator should commute with other generators" $ 
                                 all (elementCommute (Weyl.generators s3s1e6Group) 0) [1..6] @? "S3 generator should be independent from others"

testE8SystemType = testCase "The e8 system is of type E8" $ determine e8System @?= fromSimples 0 [E8]

testSubS3E7SystemType = testCase "The sub S3E7 system is of type S3E7" $ 
                                 determine (subSystem e8SubS3E7System) `isomorphic` fromSimples 0 [A 1,E7] @? "Non isomorphic"

testSubSpin16SystemType = testCase "The sub spin16 system is of type D8" $ 
                                 determine (subSystem e8SubSpin16System) `isomorphic` fromSimples 0 [D 8] @? "Non isomorphic"

testS3E7SystemType = testCase "The s3e7 system is of type S3E7" $ determine s3E7System `isomorphic` fromSimples 0 [A 1,E7] @? "Non isomorphic"

testSubS3S1E6SystemType = testCase "The sub S3S1E6 system is of type S3S1E6" $ 
                                 determine (subSystem s3E7SubS3S1E6System) `isomorphic` fromSimples 1 [A 1,E6] @? "Non isomorphic"

testSubSpin4Spin12SystemType = testCase "The sub spin4spin12 system is of type D2D6" $ 
                                 determine (subSystem s3E7SubSpin4Spin12System) `isomorphic` fromSimples 0 [D 2,D 6] @? "Non isomorphic"